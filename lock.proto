syntax = "proto3";

package lock_service;

// lock acquire/release arguments, add any fields you want
message lock_args {
    int32 client_id = 1;
    int32 lock_val = 2;
    
}

// server return Status, we will add more in the future
enum Status {
    SUCCESS = 0;   
    FILE_ERROR = 1; 
    LOCK_NOT_ACQUIRED = 7;   
    WORKING_ON_IT = 22;
    LOCK_EXPIRED = 23;
    NOT_LEADER = 24;
    SERVER_UNAVAILABLE = 25;
}

// response struct, adjust or add any fields you want
message Response {
    Status status = 1;
    int32 id_num = 2;
}

message leader{
    Status status = 1;
    string server = 2;
}

// file append arguments, add any fields you want
message file_args {
    string filename = 1;
    bytes content = 2;
    int32 client_id = 3;
    int32 lock_val = 4;
}

// field to hold an int, because the arguments and return values should be "message" type
message Int {
    int32 rc = 1;
}

message raft_heartbeat_args {
    int32 term = 1;
    bool success = 2;
} 

message raft_request_args {
    int32 term = 1;
    string candidate_id = 2;
    int32 last_log_index = 3;
}

message raft_response_args {
    bool vote_granted = 1;
    int32 term = 2;
}

service LockService {
    rpc client_init(Int) returns (Response);
    rpc lock_acquire(lock_args) returns (Response);
    rpc lock_release(lock_args) returns (Response);
    rpc file_append(file_args) returns (Response);
    rpc client_close(Int) returns (Response);
    rpc request_vote(raft_request_args) returns (raft_response_args);
    rpc heartbeat(raft_request_args) returns (raft_heartbeat_args);
    rpc get_leader(Int) returns (leader);
}